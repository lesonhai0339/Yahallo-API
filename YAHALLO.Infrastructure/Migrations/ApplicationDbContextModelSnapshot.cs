// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YAHALLO.Infrastructure.Data;

#nullable disable

namespace YAHALLO.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("YAHALLO.Domain.Entities.ArtistEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Countries")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Depscription")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LifeStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Artist", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.AuthorEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Countries")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Depscription")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LifeStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.BlogEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisLike")
                        .HasColumnType("int");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Blogs", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.ChapterEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("MangaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("Chapter", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.CommentEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CanComment")
                        .HasColumnType("bit");

                    b.Property<bool>("CanHide")
                        .HasColumnType("bit");

                    b.Property<bool>("CanLike")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRemove")
                        .HasColumnType("bit");

                    b.Property<bool>("CanReply")
                        .HasColumnType("bit");

                    b.Property<string>("ChapterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<int>("CommentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisLikeCount")
                        .HasColumnType("int");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("MangaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("MangaId");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.FollowEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MangaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "MangaId");

                    b.HasIndex("MangaId");

                    b.ToTable("Follow", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.ImageEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChapterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CloudUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("MangaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TypeImage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("MangaId")
                        .IsUnique()
                        .HasFilter("[MangaId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaArtistEntity", b =>
                {
                    b.Property<string>("MangaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArtistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MangaId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("MangaArtist", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaAssociateNameEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MangaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("AssociateName", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaAuthorEntity", b =>
                {
                    b.Property<string>("MangaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MangaId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("MangaAuthor", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Countries")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("MangaSeasonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MangaSeasonId");

                    b.HasIndex("UserId");

                    b.ToTable("Manga", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaRatingEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MangaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "MangaId");

                    b.HasIndex("MangaId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaSeasonEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Season")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MangaSeason", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaViewEntity", b =>
                {
                    b.Property<string>("MangaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("View")
                        .HasColumnType("int");

                    b.HasKey("MangaId");

                    b.ToTable("MangaView", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.Reference.AttechmentEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MediaType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("CommentId");

                    b.ToTable("Attechment", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.Reference.CountingEntitity", b =>
                {
                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChapterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MangaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumberOfVisit")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserVisit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("ParentId");

                    b.HasIndex("BlogId")
                        .IsUnique()
                        .HasFilter("[BlogId] IS NOT NULL");

                    b.HasIndex("ChapterId")
                        .IsUnique()
                        .HasFilter("[ChapterId] IS NOT NULL");

                    b.HasIndex("CommentId")
                        .IsUnique()
                        .HasFilter("[CommentId] IS NOT NULL");

                    b.HasIndex("MangaId")
                        .IsUnique()
                        .HasFilter("[MangaId] IS NOT NULL");

                    b.ToTable("Counting", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.Reference.ReactionEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisLike")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecommend")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitCount")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BlogId");

                    b.HasIndex("BlogId");

                    b.ToTable("Reaction", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.Reference.ThreadOfBlogEntity", b =>
                {
                    b.Property<string>("ThreadId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ThreadId", "BlogId");

                    b.HasIndex("BlogId");

                    b.ToTable("ThreadOfBlog", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.Reference.UserOldPasswordEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldPasswords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("OldPassword", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.RoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleCode")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(2147483647)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.ThreadEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Threads", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.UserRoleEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.UserTokenEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpiredRefeshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserDelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefeshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.ChapterEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.MangaEntity", "MangaEntity")
                        .WithMany("ChaptersEntities")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MangaEntity");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.CommentEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.BlogEntity", "BlogEntity")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YAHALLO.Domain.Entities.ChapterEntity", "ChapterEntity")
                        .WithMany("CommentEntities")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YAHALLO.Domain.Entities.CommentEntity", "Parent")
                        .WithMany("Entities")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YAHALLO.Domain.Entities.MangaEntity", "MangaEntity")
                        .WithMany("CommentEntities")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YAHALLO.Domain.Entities.UserEntity", null)
                        .WithMany("ReplyComment")
                        .HasForeignKey("UserEntityId");

                    b.HasOne("YAHALLO.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("CommentEntities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BlogEntity");

                    b.Navigation("ChapterEntity");

                    b.Navigation("MangaEntity");

                    b.Navigation("Parent");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.FollowEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.MangaEntity", "Manga")
                        .WithMany("FollowEntities")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YAHALLO.Domain.Entities.UserEntity", "User")
                        .WithMany("FollowEntities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.ImageEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.ChapterEntity", "ChapterEntity")
                        .WithMany("ImagesEntities")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YAHALLO.Domain.Entities.MangaEntity", "MangaEntity")
                        .WithOne("Thumbnail")
                        .HasForeignKey("YAHALLO.Domain.Entities.ImageEntity", "MangaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YAHALLO.Domain.Entities.UserEntity", "UserEntity")
                        .WithOne("Avatar")
                        .HasForeignKey("YAHALLO.Domain.Entities.ImageEntity", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChapterEntity");

                    b.Navigation("MangaEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaArtistEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.ArtistEntity", "Artist")
                        .WithMany("ArtistEntities")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YAHALLO.Domain.Entities.MangaEntity", "Manga")
                        .WithMany("ArtistEntities")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaAssociateNameEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.MangaEntity", "Manga")
                        .WithMany("AssociateNameEntities")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaAuthorEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.AuthorEntity", "Author")
                        .WithMany("AuthorEntities")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YAHALLO.Domain.Entities.MangaEntity", "Manga")
                        .WithMany("AuthorEntities")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.MangaSeasonEntity", "MangaSeasonEntity")
                        .WithMany("MangaEntities")
                        .HasForeignKey("MangaSeasonId");

                    b.HasOne("YAHALLO.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("MangaEntities")
                        .HasForeignKey("UserId");

                    b.Navigation("MangaSeasonEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaRatingEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.MangaEntity", "Manga")
                        .WithMany("RatingEntities")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YAHALLO.Domain.Entities.UserEntity", "User")
                        .WithMany("MangaRatingEntities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaViewEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.MangaEntity", "Manga")
                        .WithOne("MangaView")
                        .HasForeignKey("YAHALLO.Domain.Entities.MangaViewEntity", "MangaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.Reference.AttechmentEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.BlogEntity", "Blog")
                        .WithMany("Attechments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YAHALLO.Domain.Entities.CommentEntity", "Comment")
                        .WithMany("Attechments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Blog");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.Reference.CountingEntitity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.BlogEntity", "Blog")
                        .WithOne("ViewCount")
                        .HasForeignKey("YAHALLO.Domain.Entities.Reference.CountingEntitity", "BlogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YAHALLO.Domain.Entities.ChapterEntity", "Chapter")
                        .WithOne("ViewCount")
                        .HasForeignKey("YAHALLO.Domain.Entities.Reference.CountingEntitity", "ChapterId");

                    b.HasOne("YAHALLO.Domain.Entities.CommentEntity", "Comment")
                        .WithOne("ViewCount")
                        .HasForeignKey("YAHALLO.Domain.Entities.Reference.CountingEntitity", "CommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YAHALLO.Domain.Entities.MangaEntity", "Manga")
                        .WithOne("ViewCount")
                        .HasForeignKey("YAHALLO.Domain.Entities.Reference.CountingEntitity", "MangaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Blog");

                    b.Navigation("Chapter");

                    b.Navigation("Comment");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.Reference.ReactionEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.BlogEntity", "Blog")
                        .WithMany("Reactions")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YAHALLO.Domain.Entities.UserEntity", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.Reference.ThreadOfBlogEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.BlogEntity", "Blog")
                        .WithMany("ThreadOfBlogEntities")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YAHALLO.Domain.Entities.ThreadEntity", "Thread")
                        .WithMany("ThreadOfBlogEntities")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.Reference.UserOldPasswordEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.UserEntity", "UserEntity")
                        .WithOne("OldPasswords")
                        .HasForeignKey("YAHALLO.Domain.Entities.Reference.UserOldPasswordEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.RoleEntity", "RoleEntity")
                        .WithMany("UserRoleEntities")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YAHALLO.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("UserRoleEntities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RoleEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.UserTokenEntity", b =>
                {
                    b.HasOne("YAHALLO.Domain.Entities.UserEntity", "UserEntity")
                        .WithOne("UserToken")
                        .HasForeignKey("YAHALLO.Domain.Entities.UserTokenEntity", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.ArtistEntity", b =>
                {
                    b.Navigation("ArtistEntities");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.AuthorEntity", b =>
                {
                    b.Navigation("AuthorEntities");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.BlogEntity", b =>
                {
                    b.Navigation("Attechments");

                    b.Navigation("Comments");

                    b.Navigation("Reactions");

                    b.Navigation("ThreadOfBlogEntities");

                    b.Navigation("ViewCount");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.ChapterEntity", b =>
                {
                    b.Navigation("CommentEntities");

                    b.Navigation("ImagesEntities");

                    b.Navigation("ViewCount");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.CommentEntity", b =>
                {
                    b.Navigation("Attechments");

                    b.Navigation("Entities");

                    b.Navigation("ViewCount");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaEntity", b =>
                {
                    b.Navigation("ArtistEntities");

                    b.Navigation("AssociateNameEntities");

                    b.Navigation("AuthorEntities");

                    b.Navigation("ChaptersEntities");

                    b.Navigation("CommentEntities");

                    b.Navigation("FollowEntities");

                    b.Navigation("MangaView");

                    b.Navigation("RatingEntities");

                    b.Navigation("Thumbnail");

                    b.Navigation("ViewCount");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.MangaSeasonEntity", b =>
                {
                    b.Navigation("MangaEntities");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.RoleEntity", b =>
                {
                    b.Navigation("UserRoleEntities");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.ThreadEntity", b =>
                {
                    b.Navigation("ThreadOfBlogEntities");
                });

            modelBuilder.Entity("YAHALLO.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Avatar");

                    b.Navigation("CommentEntities");

                    b.Navigation("FollowEntities");

                    b.Navigation("MangaEntities");

                    b.Navigation("MangaRatingEntities");

                    b.Navigation("OldPasswords")
                        .IsRequired();

                    b.Navigation("Reactions");

                    b.Navigation("ReplyComment");

                    b.Navigation("UserRoleEntities");

                    b.Navigation("UserToken");
                });
#pragma warning restore 612, 618
        }
    }
}
